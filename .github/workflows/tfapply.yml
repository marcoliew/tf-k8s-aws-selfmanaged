# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'tfapply'

on:
  push:
    branches: [ "main" ]
  # pull_request:
  # workflow_run:
  #   workflows: ["tfsec"]  # Name of the workflow to depend on
  #   types:
  #     - completed    

#env:
  #AWS_ROLE_DEV: arn:aws:iam::ACCOUNT_ID_DEV:role/GitHubAction-AssumeRoleWithAction
  #AWS_ROLE_PROD: arn:aws:iam::058264095432:role/GitHubAction-AssumeRoleWithAction
  #TF_WORKSPACE_DEV: "tf-k8s-aws-dev"
  #TF_WORKSPACE_PROD: "tf-k8s-aws-selfmanaged"  

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    # env:
    #   AWS_ACCOUNT_ID: 058264095432
    #   ROLE_NAME: GitHubAction-AssumeRoleWithAction
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Debug Environment Variables
      run: |
        echo "AWS_ACCOUNT_ID is: ${{ vars.AWS_ACCOUNT_ID }}"
        echo "ROLE_NAME is: $ROLE_NAME"

    # Setup AWS OIDC credential
    - name: Configure AWS credentials for OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{vars.AWS_ACCOUNT_ID}}:role/${{vars.ROLE_NAME}} # ${{ env.AWS_ROLE_PROD }} # 
        #role-session-name: VIA_ODIC_AWS
        aws-region: ap-southeast-2
        audience: sts.amazonaws.com

    - name: Sts GetCallerIdentity
      run: |
        aws sts get-caller-identity
        aws s3 ls

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     #cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    #     terraform_version: 1.9.8

    - name: Set Terraform Cloud Token
      run: echo "TF_TOKEN_app_terraform_io=${{ secrets.TF_API_TOKEN }}" >> $GITHUB_ENV  # Set the environment variable

    - name: Verify Terraform Cloud Token
      run: |
        if [ -z "$TF_TOKEN_app_terraform_io" ]; then
          echo "TF_TOKEN_app_terraform_io is not set!"
          exit 1
        else
          echo "TF_TOKEN_app_terraform_io is set."
        fi

    - name: Partial Token Preview (for troubleshooting only)
      run: |
        echo "TF_TOKEN_app_terraform_io starts with: ${TF_TOKEN_app_terraform_io:0:5}****"        
  
    # - name: Set Terraform Workspace
    #   run: echo "TF_WORKSPACE=${{vars.TF_WORKSPACE_NAME}}" >> $GITHUB_ENV        

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init with Specified Workspace
      run: |
        terraform init -reconfigure \
        -backend-config="organization=xeniumsolution"
        -backend-config="workspaces.name=${{vars.TF_WORKSPACE_NAME}}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

    - name: Debug Branch Condition
      run: |
        echo "Current branch: ${{ github.ref }}"
    

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
